disability_Type_group_members, minority_group_members, representative_criteria_group_members,
infrast_reg, wast_management, water_source_, Ecosystem_infrastructure,
infrast_status, estimated_cost, comm_contribution_cost,
estimated_pple, Picture, infrast_geopoint, contact_info,
water1, water2, water3, water3_1, water4
)
get_data <- function(username, password ,formID){
# Make the API request
response_data <- GET(url = paste("https://api.ona.io/api/v1/data/","788509",sep = ""), authenticate("abdullahiaweis","tutka_sulsulaaye@123"))
status <- status_code(response_data)
if (status == 200) {
formData <- prettify(rawToChar(response_data$content))%>% fromJSON() %>% as.data.frame()
if("groups_registration/group_members" %in% names(formData)){
formData %<>%
unnest("groups_registration/group_members",keep_empty = TRUE)%>%
as.data.frame()%>%mutate(index = row_number())%>%
dplyr::rename(
name_group_members = "groups_registration/group_members/name",
ind_sex_group_members  = "groups_registration/group_members/ind_sex",
ind_age_group_members  ="groups_registration/group_members/ind_age",
ind_position_group_members  ="groups_registration/group_members/ind_position",
tel_number_group_members  ="groups_registration/group_members/tel_number",
disability_group_members  ="groups_registration/group_members/disability_",
disability_Type_group_members  ="groups_registration/group_members/disability_Type_",
minority_group_members  ="groups_registration/group_members/minority_",
representative_criteria_group_members  ="groups_registration/group_members/representative_criteria",
vulnerability_other_group_members  ="groups_registration/group_members/vulnerability_other",
)
}
if("hh_registration/hh_members" %in% names(formData)){
for (i in seq_along(formData$`hh_registration/hh_members`)) {
# Access each member in the list
member <- formData$`hh_registration/hh_members`[[i]]
# Check if member is a list and has the required fields
if (is.list(member)) {
# Standardize to one age column, converting all to character for consistency
if ("hh_registration/hh_members/ind_age_2" %in% names(member)) {
member$ind_age_final <- as.character(member$`hh_registration/hh_members/ind_age_2`)
} else if ("hh_registration/hh_members/ind_age" %in% names(member)) {
member$ind_age_final <- as.character(member$`hh_registration/hh_members/ind_age`)
}
# Remove old age columns if they exist
member$`hh_registration/hh_members/ind_age_2` <- NULL
member$`hh_registration/hh_members/ind_age` <- NULL
# Put the modified member back into the dataframe
formData$`hh_registration/hh_members`[[i]] <- member
}
}
formData <- formData %>%
unnest(`hh_registration/hh_members`, keep_empty = TRUE) %>%
as.data.frame() %>%
mutate(index = row_number()) %>%
rename(
name_hh_members = "hh_registration/hh_members/name",
ind_sex_hh_members = "hh_registration/hh_members/ind_sex",
ind_age_hh_members = "ind_age_final",
tel_number_hh_members = "hh_registration/hh_members/tel_number"
)
}
formData %<>%purrr::discard(is.list)
names(formData) <- gsub(".*/", "", names(formData))
if(nrow(formData) == 0){
return(
data.frame(
status= 200,
message = "empty",
data = ""
)
)
}else{
return(
data.frame(
status= 200,
message = "success",
formData
)
)
}
}
else if (status == 401) {
# Unauthorized - likely incorrect username/password
return(
data.frame(
status= 401,
message = "incorrect username/password",
data = ""
)
)
}
else if (status >= 500) {
# Server error
return(
data.frame(
status= 500,
message = "Server error: Try again later.",
data = ""
)
)
}
else {
# Other errors
return(
data.frame(
status= status,
message = paste("Error encountered. Status code:", status),
data = ""
)
)
}
}
baseline_survey  <- get_data("abdullahiaweis","tutka_sulsulaaye@123","788509")
baseline_survey %>% select(
enum_name, enum_gender, enum_phone_number, Member_id,
Region_id, District_id, Community_id, consent,
registration_category, regis_activities, participants_name,
participants_sex, tel_num, ecosystem_initiatives, recovery_assistance_farmers,
recovery_assistance_market_actors,
nfi_, kitchen_garden, hoh_name, hoh_sex, hoh_age, tel_number,
marital_status_hoh, hoh_educ_level, residential_status, residential_date,
decision_migrate, lvhd_zone, income_sources,
income_sources_O, income_sources_main, income_amount, hh_size,
name_hh_members, ind_sex_hh_members, ind_age_hh_members, tel_number_hh_members,
vulnerability_criteria, vulnerability_other_, no_disabled_member,
disability_Type, clan_minority,
groups, specify_, community_groups_, date_created, group_size,
name_group_members, ind_sex_group_members, ind_age_group_members,
ind_position_group_members, tel_number_group_members, disability_group_members,
disability_Type_group_members, minority_group_members, representative_criteria_group_members,
infrast_reg, wast_management, water_source_, Ecosystem_infrastructure,
infrast_status, estimated_cost, comm_contribution_cost,
estimated_pple, Picture, infrast_geopoint, contact_info,
water1, water2, water3, water3_1, water4
)
baseline_survey %>% select(
enum_name, enum_gender, enum_phone_number, Member_id,
Region_id, District_id, Community_id, consent,
registration_category, regis_activities, participants_name,
participants_sex, tel_num, ecosystem_initiatives, recovery_assistance_farmers,
recovery_assistance_market_actors,
nfi_, kitchen_garden, hoh_name, hoh_sex, hoh_age, tel_number,
marital_status_hoh, hoh_educ_level, residential_status, residential_date,
decision_migrate, lvhd_zone, income_sources,
income_sources_O, income_sources_main, income_amount, hh_size,
name_hh_members, ind_sex_hh_members, ind_age_hh_members, tel_number_hh_members,
vulnerability_criteria, vulnerability_other_, no_disabled_member,
disability_Type, clan_minority,
groups, specify_, community_groups_, date_created, group_size,
name_group_members, ind_sex_group_members, ind_age_group_members,
ind_position_group_members, tel_number_group_members, disability_group_members,
disability_Type_group_members, minority_group_members, representative_criteria_group_members,
infrast_reg, wast_management, water_source_, Ecosystem_infrastructure,
infrast_status, estimated_cost, comm_contribution_cost,
estimated_pple, Picture, infrast_geopoint, contact_info,
water1, water2, water3, water3_1, water4
) %>%
mutate(
across(all_of(columns_to_replace_na), ~replace(., is.na(.), 0)),
tab_date = as.Date(format(parse_date_time(X_submission_time, orders = "Y-m-d H:M:OSz"),"%Y-%m-%d")),
start_time = format(parse_date_time(start, orders = "Y-m-d H:M:OSz")+hours(3),"%Y-%m-%d %H:%M:%S"),
end_time = format(parse_date_time(end, orders = "Y-m-d H:M:OSz")+hours(3),"%Y-%m-%d %H:%M:%S")
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("languageserver")
baseline_survey
max(baseline_survey$X_submission_time)
runApp()
runApp()
?add_markers
runApp()
runApp()
?percent_rank()
x <- c(5, 1, 3, 2, 2)
cume_dist(x)
percent_rank(x)
data <- data.frame(
group = c("A", "A", "B", "B", "B", "C"),
variable = c("X", "Y", "X", "X", "Y", "Y")
)
# Group by 'group' and calculate count and percentage
result <- data %>%
group_by(group) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
print(result)
result <- data %>%
group_by(group) %>%
reframe(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
print(result)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- baseline_survey %>%
group_by(Community_id)%>%
summarise(
`Total Registation` = n()
)
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar', orientation = 'h')
fig
data <- baseline_survey %>%
group_by(Community_id)%>%
summarise(
`Total Registation` = n()
)
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar+text', orientation = 'h',
text=~`Total Registation` , textposition = "outside" )
fig
data <- baseline_survey %>%
group_by(Community_id)%>%
summarise(
`Total Registation` = n()
)
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar', orientation = 'h',
) %>%
add_text( x = ~`Total Registation`, y = ~Community_id , text=~`Total Registation` , textposition = "outside")
data <- baseline_survey %>%
group_by(Community_id)%>%
summarise(
`Total Registation` = n()
)
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar', orientation = 'h',
) %>%
add_annotations(text = ~`Total Registration`, x = ~`Total Registration`, y = ~Community_id,
showarrow = FALSE, font = list(color = 'black', size = 14))
data <- baseline_survey %>%
group_by(Community_id)%>%
summarise(
`Total Registation` = n()
)
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar', orientation = 'h') %>%
add_annotations(text = ~`Total Registration`, x = ~`Total Registration`, y = ~Community_id,
showarrow = FALSE, font = list(color = 'black', size = 14))
data <- baseline_survey %>%
group_by(Community_id)%>%
summarise(
`Total Registation` = n()
)
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar', orientation = 'h') %>%
add_annotations(text = ~`Total Registration`, x = ~`Total Registration`, y = ~Community_id,
showarrow = FALSE, font = list(color = 'black', size = 14))
fig
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar', orientation = 'h')
data <- baseline_survey %>%
group_by(Community_id)%>%
summarise(
`Total Registation` = n()
)
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar', orientation = 'h') %>%
add_annotations(data= data , text = ~`Total Registration`, x = ~`Total Registration`, y = ~Community_id,
showarrow = FALSE, font = list(color = 'black', size = 14))
fig
data
data <- baseline_survey %>%
group_by(Community_id)%>%
summarise(
`Total Registation` = n()
)
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar', orientation = 'h') %>%
add_text(text = ~`Total Registration`, x = ~`Total Registration`, y = ~Community_id,
showarrow = FALSE, font = list(color = 'black', size = 14))
fig
data <- baseline_survey %>%
group_by(Community_id)%>%
summarise(
`Total Registation` = n()
)
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar', orientation = 'h')
data <- baseline_survey %>%
group_by(Community_id)%>%
summarise(
`Total Registation` = n()
)
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar', orientation = 'h')%>%
add_text(text = ~`Total Registation`, x = ~`Total Registation`, y = ~Community_id,
showarrow = FALSE, font = list(color = 'black', size = 14))
fig
data <- baseline_survey %>%
group_by(Community_id)%>%
summarise(
`Total Registation` = n()
)
fig <- plot_ly(data= data , x = ~`Total Registation`, y = ~Community_id, type = 'bar', orientation = 'h')%>%
add_annotations(text = ~`Total Registation`, x = ~`Total Registation`, y = ~Community_id,
showarrow = FALSE, font = list(color = 'black', size = 14))
fig
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
baseline_survey%>%
group_by(consent)%>%
reframe(
count = n()
)
runApp()
runApp()
baseline_survey %>%
group_by(
hoh_name, hoh_sex, hoh_age, tel_number,
marital_status_hoh, hoh_educ_level, residential_status, residential_date,
decision_migrate, lvhd_zone, income_sources,
income_sources_O, income_sources_main, income_amount, hh_size,income_sources_main,
income_amount,
hh_size,lvhd_zone,
income_sources,
residential_status
)
baseline_survey %>%
group_by(
hoh_name, hoh_sex, hoh_age, tel_number,
marital_status_hoh, hoh_educ_level, residential_status,
lvhd_zone, income_sources,
income_sources_main, income_amount, hh_size,
hh_size
)
baseline_survey %>%
group_by(
hoh_name, hoh_sex, hoh_age, tel_number,
marital_status_hoh, hoh_educ_level, residential_status,
lvhd_zone, income_sources,
income_sources_main, income_amount,
hh_size
)
baseline_survey %>%
group_by(
hoh_name, hoh_sex, hoh_age, tel_number,
marital_status_hoh, hoh_educ_level, residential_status,
lvhd_zone, income_sources,
income_sources_main, income_amount,
hh_size
)
baseline_survey %>%
group_by(x_id
)
baseline_survey
baseline_survey %>%
group_by(X_id
)
respondant_data <- baseline_survey %>%
group_by(X_id
)
nrow(respondant_data)
nrow(baseline_survey)
respondant_data <- baseline_survey %>%
group_by(X_id)%>%
summarise(
count = n()
)
nrow(respondant_data)
baseline_survey  <- get_data("abdullahiaweis","tutka_sulsulaaye@123","788509")
baseline_survey
nrow(baseline_survey)
respondant_data <- baseline_survey %>%
group_by(X_id)%>%
summarise(
count = n()
)
nrow(respondant_data)
baseline_survey %>%
group_by(X_id)%>%
summarise(
hoh_name = first(hoh_name),
hoh_sex = first(hoh_sex),
hoh_age = first(hoh_age),
tel_number = first(tel_number),
marital_status_hoh = first(marital_status_hoh),
hoh_educ_level = first(hoh_educ_level),
residential_status = first(residential_status),
lvhd_zone = first(lvhd_zone),
income_sources = first(income_sources),
income_sources_main = first(income_sources_main),
income_amount = first(income_amount),
hh_size = first(hh_size)
)
baseline_survey %>%
group_by(X_id)%>%
summarise(
hoh_name = first(hoh_name),
hoh_sex = first(hoh_sex),
hoh_age = first(hoh_age),
tel_number = first(tel_number),
marital_status_hoh = first(marital_status_hoh),
hoh_educ_level = first(hoh_educ_level),
residential_status = first(residential_status),
lvhd_zone = first(lvhd_zone),
income_sources = first(income_sources),
income_sources_main = first(income_sources_main),
income_amount = first(income_amount),
hh_size = first(hh_size)
)
baseline_survey %>%
filter(System_Date = '2024-03-01')
baseline_survey %>%
filter(System_Date == '2024-03-01')
group_by(X_id)%>%
summarise(
hoh_name = first(hoh_name),
hoh_sex = first(hoh_sex),
hoh_age = first(hoh_age),
tel_number = first(tel_number),
marital_status_hoh = first(marital_status_hoh),
hoh_educ_level = first(hoh_educ_level),
residential_status = first(residential_status),
lvhd_zone = first(lvhd_zone),
income_sources = first(income_sources),
income_sources_main = first(income_sources_main),
income_amount = first(income_amount),
hh_size = first(hh_size)
)
baseline_survey %>%
filter(System_Date == '2024-03-01')%>%
group_by(X_id)%>%
summarise(
hoh_name = first(hoh_name),
hoh_sex = first(hoh_sex),
hoh_age = first(hoh_age),
tel_number = first(tel_number),
marital_status_hoh = first(marital_status_hoh),
hoh_educ_level = first(hoh_educ_level),
residential_status = first(residential_status),
lvhd_zone = first(lvhd_zone),
income_sources = first(income_sources),
income_sources_main = first(income_sources_main),
income_amount = first(income_amount),
hh_size = first(hh_size)
)
baseline_survey %>%
filter(System_Date > '2024-03-01')%>%
group_by(X_id)%>%
summarise(
hoh_name = first(hoh_name),
hoh_sex = first(hoh_sex),
hoh_age = first(hoh_age),
tel_number = first(tel_number),
marital_status_hoh = first(marital_status_hoh),
hoh_educ_level = first(hoh_educ_level),
residential_status = first(residential_status),
lvhd_zone = first(lvhd_zone),
income_sources = first(income_sources),
income_sources_main = first(income_sources_main),
income_amount = first(income_amount),
hh_size = first(hh_size)
)
respondant_data
respondantMaritaStatus <- respondant_data%>%
group_by(marital_status_hoh)%>%
reframe(
count = n()
)
respondant_data%>%
group_by(marital_status_hoh)%>%
reframe(
count = n()
)
respondant_data <- baseline_survey %>%
group_by(X_id)%>%
summarise(
hoh_name = first(hoh_name),
hoh_sex = first(hoh_sex),
hoh_age = first(hoh_age),
tel_number = first(tel_number),
marital_status_hoh = first(marital_status_hoh),
hoh_educ_level = first(hoh_educ_level),
residential_status = first(residential_status),
lvhd_zone = first(lvhd_zone),
income_sources = first(income_sources),
income_sources_main = first(income_sources_main),
income_amount = first(income_amount),
hh_size = first(hh_size)
)
respondant_data%>%
group_by(marital_status_hoh)%>%
reframe(
count = n()
)
respondantMaritaStatus <- respondant_data%>%
group_by(marital_status_hoh)%>%
reframe(
count = n()
)
fig <- plot_ly(respondantMaritaStatus, labels = ~marital_status_hoh, values = ~count,
type = 'pie',marker = list(colors = c("#00B050","#008BA8","#40419A","#ED7667","#F99D1E","#82BA96")))
fig <- fig %>% layout(title = '',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
legend = list(orientation = 'h', y = -0.3))
fig
runApp()
runApp()
